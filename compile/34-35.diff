diff --git a/arch/i386/Makefile b/arch/i386/Makefile
index 4365311d490..8bd6d89530a 100644
--- a/arch/i386/Makefile
+++ b/arch/i386/Makefile
@@ -17,33 +17,11 @@ AS86    =$(CROSS_COMPILE)as86 -0 -a
 AS386   =$(CROSS_COMPILE)as86 -3
 LD86    =$(CROSS_COMPILE)ld86 -0
 
-#
-# ZIMAGE_OFFSET is the load offset of the compression loader
-# BZIMAGE_OFFSET is the load offset of the high loaded compression loader
-#
-ZIMAGE_OFFSET=0x1000
-BZIMAGE_OFFSET=0x100000
-
-#
-# IMAGE_OFFSET is the load offset of the _real_ kernel, soon
-# to be offset by another 0xC0000000...
-#
-IMAGE_OFFSET=0xC0100000
-
-# This is used for ELF - it needs to migrate or be moved.
-LD_RFLAG = -m elf_i386
-
 LD=$(CROSS_COMPILE)ld -m elf_i386
-CPP=$(CC) -E -D__ELF__
-OBJDUMP=$(CROSS_COMPILE)objdump
-OBJDUMP_FLAGS=-k -q 
-ENCAPS=$(CROSS_COMPILE)encaps
-OBJCOPY=$(CROSS_COMPILE)objcopy -O binary -R .note -R .comment -R .stab -R .stabstr
-ZLDFLAGS=-e startup_32 
+CPP=$(CC) -E
+OBJCOPY=$(CROSS_COMPILE)objcopy -O binary -R .note -R .comment -S
 LDFLAGS=-e stext
-ZLINKFLAGS =-Ttext $(ZIMAGE_OFFSET) $(ZLDFLAGS)
-BZLINKFLAGS =-Ttext $(BZIMAGE_OFFSET) $(ZLDFLAGS)
-LINKFLAGS =-Ttext $(IMAGE_OFFSET) $(LDFLAGS)
+LINKFLAGS =-T arch/i386/vmlinux.lds $(LDFLAGS)
 
 CFLAGS := $(CFLAGS) -pipe -fno-strength-reduce
 
diff --git a/arch/i386/boot/Makefile b/arch/i386/boot/Makefile
index 503b0cce6e5..83e4a19dec6 100644
--- a/arch/i386/boot/Makefile
+++ b/arch/i386/boot/Makefile
@@ -8,29 +8,21 @@
 # Copyright (C) 1994 by Linus Torvalds
 #
 
-HOSTCFLAGS := $(HOSTCFLAGS) -D__BFD__
-
 ifdef SMP
 HOSTCFLAGS := $(HOSTCFLAGS) -D__SMP__
 endif
 
+BOOT_INCL =	$(TOPDIR)/include/linux/config.h \
+		$(TOPDIR)/include/linux/autoconf.h \
+		$(TOPDIR)/include/asm/boot.h
+
 zImage: $(CONFIGURE) bootsect setup compressed/vmlinux tools/build
-	if hash $(ENCAPS) 2> /dev/null; then \
-	  $(OBJDUMP) $(OBJDUMP_FLAGS) -o $(ZIMAGE_OFFSET) compressed/vmlinux > compressed/vmlinux.out; \
-	else \
-	  $(OBJCOPY) compressed/vmlinux compressed/vmlinux.out; \
-	fi
+	$(OBJCOPY) compressed/vmlinux compressed/vmlinux.out
 	tools/build bootsect setup compressed/vmlinux.out $(ROOT_DEV) > zImage
-	sync
 
-bzImage: $(CONFIGURE) bbootsect setup compressed/bvmlinux tools/bbuild
-	if hash $(ENCAPS) 2> /dev/null; then \
-	  $(OBJDUMP) $(OBJDUMP_FLAGS) -o $(BZIMAGE_OFFSET) compressed/bvmlinux > compressed/bvmlinux.out; \
-	else \
-	  $(OBJCOPY) compressed/bvmlinux compressed/bvmlinux.out; \
-	fi
-	tools/bbuild bbootsect setup compressed/bvmlinux.out $(ROOT_DEV) > bzImage
-	sync
+bzImage: $(CONFIGURE) bbootsect bsetup compressed/bvmlinux tools/build
+	$(OBJCOPY) compressed/bvmlinux compressed/bvmlinux.out
+	tools/build -b bbootsect bsetup compressed/bvmlinux.out $(ROOT_DEV) > bzImage
 
 compressed/vmlinux: $(TOPDIR)/vmlinux
 	@$(MAKE) -C compressed vmlinux
@@ -54,25 +46,31 @@ install: $(CONFIGURE) zImage
 tools/build: tools/build.c
 	$(HOSTCC) $(HOSTCFLAGS) -o $@ $< -I$(TOPDIR)/include
 
-tools/bbuild: tools/build.c
-	$(HOSTCC) $(HOSTCFLAGS) -D__BIG_KERNEL__ -o $@ $< -I$(TOPDIR)/include
-
 setup: setup.o
 	$(LD86) -s -o $@ $<
 
 setup.o: setup.s
 	$(AS86) -o $@ $<
 
-setup.s: setup.S video.S $(CONFIGURE) $(TOPDIR)/include/linux/config.h Makefile
+setup.s: setup.S video.S Makefile $(BOOT_INCL) $(TOPDIR)/include/linux/version.h
 	$(CPP) -traditional $(SVGA_MODE) $(RAMDISK) $< -o $@
 
+bsetup: bsetup.o
+	$(LD86) -s -o $@ $<
+
+bsetup.o: bsetup.s
+	$(AS86) -o $@ $<
+
+bsetup.s: setup.S video.S Makefile $(BOOT_INCL) $(TOPDIR)/include/linux/version.h
+	$(CPP) -D__BIG_KERNEL__ -traditional $(SVGA_MODE) $(RAMDISK) $< -o $@
+
 bootsect: bootsect.o
 	$(LD86) -s -o $@ $<
 
 bootsect.o: bootsect.s
 	$(AS86) -o $@ $<
 
-bootsect.s: bootsect.S $(CONFIGURE) $(TOPDIR)/include/linux/config.h Makefile
+bootsect.s: bootsect.S Makefile $(BOOT_INCL)
 	$(CPP) -traditional $(SVGA_MODE) $(RAMDISK) $< -o $@
 
 bbootsect: bbootsect.o
@@ -81,14 +79,13 @@ bbootsect: bbootsect.o
 bbootsect.o: bbootsect.s
 	$(AS86) -o $@ $<
 
-bbootsect.s: bootsect.S $(CONFIGURE) $(TOPDIR)/include/linux/config.h Makefile
+bbootsect.s: bootsect.S Makefile $(BOOT_INCL)
 	$(CPP) -D__BIG_KERNEL__ -traditional $(SVGA_MODE) $(RAMDISK) $< -o $@
 
 dep:
 
 clean:
-	rm -f bootsect setup
-	rm -f bbootsect
-	rm -f zImage tools/build compressed/vmlinux.out
-	rm -f bzImage tools/bbuild compressed/bvmlinux.out
+	rm -f tools/build
+	rm -f setup bootsect zImage compressed/vmlinux.out
+	rm -f bsetup bbootsect bzImage compressed/bvmlinux.out
 	@$(MAKE) -C compressed clean
diff --git a/arch/i386/boot/compressed/Makefile b/arch/i386/boot/compressed/Makefile
index d7f093e3f14..9a78bca69d5 100644
--- a/arch/i386/boot/compressed/Makefile
+++ b/arch/i386/boot/compressed/Makefile
@@ -10,15 +10,22 @@ SYSTEM = $(TOPDIR)/vmlinux
 OBJECTS = $(HEAD) misc.o
 
 CFLAGS = -O2 -DSTDC_HEADERS
+ZLDFLAGS = -e startup_32
+
+#
+# ZIMAGE_OFFSET is the load offset of the compression loader
+# BZIMAGE_OFFSET is the load offset of the high loaded compression loader
+#
+ZIMAGE_OFFSET = 0x1000
+BZIMAGE_OFFSET = 0x100000
+
+ZLINKFLAGS = -Ttext $(ZIMAGE_OFFSET) $(ZLDFLAGS)
+BZLINKFLAGS = -Ttext $(BZIMAGE_OFFSET) $(ZLDFLAGS)
 
 ifdef SMP
 CFLAGS := $(CFLAGS) -D__SMP__
 endif
 
-TARGET=--target elf32-i386
-INPUT_DATA=input_data
-INPUT_LEN=input_len
-
 all: vmlinux
 
 vmlinux: piggy.o $(OBJECTS)
@@ -40,24 +47,14 @@ head.o: head.S $(TOPDIR)/include/linux/tasks.h
 endif
 
 
-# You cannot compress a file and have the kernel uncompress it, it must
-# be stdin
 piggy.o:	$(SYSTEM)
 	tmppiggy=/tmp/$$$$piggy; \
 	rm -f $$tmppiggy $$tmppiggy.gz $$tmppiggy.lnk; \
-	if hash $(ENCAPS) 2> /dev/null; then \
-	  $(OBJDUMP) $(OBJDUMP_FLAGS) -o $(IMAGE_OFFSET) $(SYSTEM) > $$tmppiggy; \
-	else \
-	  $(OBJCOPY) $(SYSTEM) $$tmppiggy; \
-	fi; \
+	$(OBJCOPY) $(SYSTEM) $$tmppiggy; \
 	gzip -f -9 < $$tmppiggy > $$tmppiggy.gz; \
-	if hash $(ENCAPS) 2> /dev/null; then \
-	  $(ENCAPS) $(TARGET) piggy.o $$tmppiggy.gz $(INPUT_DATA) $(INPUT_LEN); \
-	else \
-	  echo "SECTIONS { .data : { input_len = .; LONG(input_data_end - input_data) input_data = .; *(.data) input_data_end = .; }}" > $$tmppiggy.lnk; \
-	  $(LD) -m elf_i386 -r -o piggy.o -b binary $$tmppiggy.gz -b elf32-i386 -T $$tmppiggy.lnk; \
-	fi; \
+	echo "SECTIONS { .data : { input_len = .; LONG(input_data_end - input_data) input_data = .; *(.data) input_data_end = .; }}" > $$tmppiggy.lnk; \
+	$(LD) -m elf_i386 -r -o piggy.o -b binary $$tmppiggy.gz -b elf32-i386 -T $$tmppiggy.lnk; \
 	rm -f $$tmppiggy $$tmppiggy.gz $$tmppiggy.lnk
 
 clean:
-	rm -f xtract piggyback vmlinux bvmlinux
+	rm -f vmlinux bvmlinux
